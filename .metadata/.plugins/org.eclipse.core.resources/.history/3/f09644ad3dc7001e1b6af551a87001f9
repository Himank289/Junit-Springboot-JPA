package com.in28minutes.jpa.hibernate.demo;



import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.persistence.Query;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;

import com.in28minutes.jpa.hibernate.demo.entity.Course;
import com.in28minutes.jpa.hibernate.demo.entity.Faculty;
//import com.in28minutes.jpa.hibernate.demo.entity.Employee1;
import com.in28minutes.jpa.hibernate.demo.repository.CourseSpringDataJpaRepository;
import com.in28minutes.jpa.hibernate.demo.repository.FacultySpringDataJpaRepository;



@SpringBootApplication
public class DemoApplicationDataJpa implements CommandLineRunner {

	private Logger logger = LoggerFactory.getLogger(this.getClass());


	@Autowired
	private CourseSpringDataJpaRepository cr;
	@Autowired
	private FacultySpringDataJpaRepository fr;


	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}

	@Override
	public void run(String... arg0) throws Exception {
		

		Faculty f=new Faculty ("Shiv Sharma",12,LocalDate.now());
		fr.save(f);
		
		Course c = new Course("Java",1200);
		c.setCourseFaculty(f);
		cr.save(c);
		
		Faculty f1=new Faculty ("Himank",10,LocalDate.now());
		fr.save(f1);
		Course c1 = new Course("OOPS",2300);
		c1.setCourseFaculty(f1);
		cr.save(c);
		
		Faculty f2=new Faculty ("isha",1,LocalDate.now());
		fr.save(f2);
		Course c2 = new Course("springboot",2300);
		c1.setCourseFaculty(f2);
		cr.save(c2);
		
		Optional<Faculty> fa=fr.findById(5);
		if(fa.isPresent()) {
		Faculty fc=	fa.get();
		System.out.println("faculty"+fc.getFacultyName()+"teaches course"+fc.getCourse());
		}
		

		
		Optional<Course> opc1 =cr.findById(2);
		if(opc1.isPresent()) {
			Course c11=opc1.get();
			System.out.println("course"+c11.getCourseId()+"has faculty"+c11.getCourseFaculty());
		}
		else{
			System.out.println("Course with course id"+c.getCourseId()+"is not present");
		}
		
		
		logger.info("Courses Total count -> {} ", cr.count());
	    System.out.println("count no of courses based on name:"+cr.countByCourseName("Java"));
	    
	    System.out.println("retrieve course based on name and order:"+cr.findByCourseNameOrderByCourseIdDesc("OOPS"));
	    
	    
		Sort sort = Sort.by(Sort.Direction.ASC, "CourseName");
		logger.info("Sorted Courses based on names in ascending order: -> {} ", cr.findAll(sort));
		
		
	   // repo.delete(e3);
		
		System.out.println(cr.count());
		
		cr.deleteByCourseName("springboot");
		
		System.out.println(cr.count());
		
		System.out.println(cr.findAll());
		
		
		List<Course> lst1 = cr.findByCourseName("Java");
		lst1.forEach(System.out::println);
		
		lst1 = cr.findByCourseNameOrderByCourseIdDesc((" Java"));
		lst1.forEach(System.out::println);
		
		System.out.println("get courses with Pattern %Java%:");
		//pattern = %Java%
		lst1 = cr.courseWithPatternInCourseName();
		lst1.forEach(System.out::println);
		
				
		lst1 = cr.deleteByCourseName("Java");
		lst1.forEach(System.out::println);
		System.out.println("After deleting course with course name:'Java'");
		
		lst1 = cr.findAll();
		lst1.forEach(System.out::println);
		
//		long ct = cr.countByCourseName("Springboot");
//		System.out.println("No. of Spring Boot courses as of now:"+ct);

		//paging and sorting
	  PageRequest sortByName=PageRequest.of(0, 1, sort);
	  Page<Course> p= cr.findAll(sortByName);
		
	  	p.forEach(System.out::println);
	  	
	  	List<Course>l=p.getContent();
	  	l.forEach(System.out::println);
	  	
	  	int n=p.getTotalPages();
	   	System.out.println("number of pages"+n);
	   	
	  	System.out.println("number of elements"+p.getTotalElements());
		
	}
}
